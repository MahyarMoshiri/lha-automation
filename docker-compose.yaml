version: "3.8"
services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  n8n:
    image: n8nio/n8n:latest
    depends_on:
      postgres: { condition: service_healthy }
      redis: { condition: service_healthy }
    environment:
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY}
      N8N_HOST: ${N8N_HOST}
      N8N_PORT: ${N8N_PORT}
      N8N_PROTOCOL: ${N8N_PROTOCOL}
      N8N_EDITOR_BASE_URL: ${N8N_EDITOR_BASE_URL}
      WEBHOOK_TUNNEL_URL: ${WEBHOOK_TUNNEL_URL}
      # queue mode
      N8N_EXECUTIONS_MODE: queue
      QUEUE_BULL_REDIS_HOST: ${QUEUE_BULL_REDIS_HOST}
      # DB
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_DATABASE: ${POSTGRES_DB}
      DB_POSTGRESDB_USER: ${POSTGRES_USER}
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD}
      # harden a bit
      N8N_PERSONALIZATION_ENABLED: "false"
      N8N_DIAGNOSTICS_ENABLED: "false"
    ports: ["5678:5678"]
    volumes:
      - n8n_data:/home/node/.n8n

  # Choose one proxy locally; in cloud use your own LB/TLS
  caddy:
    image: caddy:2
    depends_on: [n8n]
    volumes:
      - ./infra/reverse-proxy/Caddyfile:/etc/caddy/Caddyfile
    ports: ["80:80", "443:443"]
    environment:
      - N8N_HOST=${N8N_HOST}

  nginx:
    image: nginx:stable
    depends_on: [n8n]
    volumes:
      - ./infra/reverse-proxy/nginx.conf:/etc/nginx/nginx.conf:ro
    ports: ["80:80"]
volumes:
  pgdata: {}
  n8n_data: {}
